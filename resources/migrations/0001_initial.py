# Generated by Django 5.0.4 on 2024-04-22 01:23

import autoslug.fields
import django.db.models.deletion
import django.utils.timezone
import uuid
import wagtail.fields
import wagtail.models
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
    ]

    operations = [
        migrations.CreateModel(
            name='Resource',
            fields=[
                ('live', models.BooleanField(default=True, editable=False, verbose_name='live')),
                ('has_unpublished_changes', models.BooleanField(default=False, editable=False, verbose_name='has unpublished changes')),
                ('first_published_at', models.DateTimeField(blank=True, db_index=True, null=True, verbose_name='first published at')),
                ('last_published_at', models.DateTimeField(editable=False, null=True, verbose_name='last published at')),
                ('go_live_at', models.DateTimeField(blank=True, null=True, verbose_name='go live date/time')),
                ('expire_at', models.DateTimeField(blank=True, null=True, verbose_name='expiry date/time')),
                ('expired', models.BooleanField(default=False, editable=False, verbose_name='expired')),
                ('locked', models.BooleanField(default=False, editable=False, verbose_name='locked')),
                ('locked_at', models.DateTimeField(editable=False, null=True, verbose_name='locked at')),
                ('abstract', wagtail.fields.RichTextField(blank=True, null=True)),
                ('purpose', wagtail.fields.RichTextField(blank=True, null=True)),
                ('date', models.DateTimeField(blank=True, default=django.utils.timezone.now, null=True)),
                ('edition', models.CharField(blank=True, max_length=255, null=True)),
                ('attribution', models.CharField(blank=True, max_length=255, null=True)),
                ('doi', models.URLField(blank=True, null=True)),
                ('other_constraints', wagtail.fields.RichTextField(blank=True, null=True)),
                ('supplemental_information', wagtail.fields.RichTextField(blank=True, null=True)),
                ('data_quality_statement', wagtail.fields.RichTextField(blank=True, null=True)),
                ('uuid', models.UUIDField(default=uuid.uuid4, primary_key=True, serialize=False)),
                ('name', models.CharField(max_length=255, unique=True)),
                ('slug', autoslug.fields.AutoSlugField(always_update=True, editable=False, populate_from='name', unique=True)),
                ('description', wagtail.fields.RichTextField(blank=True, null=True)),
                ('is_featured', models.BooleanField(default=False)),
                ('is_advertised', models.BooleanField(default=False)),
                ('thumbnail', models.ImageField(blank=True, null=True, upload_to='resources/thumbnails/')),
                ('popular_count', models.IntegerField(default=0)),
                ('share_count', models.IntegerField(default=0)),
                ('state', models.CharField(choices=[('', 'Processing state'), ('running', 'Running'), ('waiting', 'Waiting'), ('complete', 'Complete'), ('ready', 'Ready'), ('invalid', 'Invalid'), ('error', 'Error')], default='running', editable=False, max_length=255)),
            ],
            options={
                'verbose_name': 'Resource',
                'verbose_name_plural': 'Resources',
            },
            bases=(wagtail.models.WorkflowMixin, models.Model),
        ),
        migrations.CreateModel(
            name='DataTable',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'Data Table',
                'verbose_name_plural': 'Data Tables',
            },
            bases=('resources.resource',),
        ),
        migrations.CreateModel(
            name='GeometryCollectionVectorLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'GeometryCollection Vector Layer',
                'verbose_name_plural': 'GeometryCollection Vector Layers',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='LineStringVectorLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'LineString Vector Layer',
                'verbose_name_plural': 'LineString Vector Layers',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='MultiLineStringVectorLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'MultiLineString Vector Layer',
                'verbose_name_plural': 'MultiLineString Vector Layers',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='MultiPointVectorLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'MultiPoint Vector Layer',
                'verbose_name_plural': 'MultiPoint Vector Layers',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='MultiPolygonVectorLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'MultiPolygon Vector Layer',
                'verbose_name_plural': 'MultiPolygon Vector Layers',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='PointVectorLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'Point Vector Layer',
                'verbose_name_plural': 'Resources: Point Vector Layers',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='PolygonVectorLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'Polygon Vector Layer',
                'verbose_name_plural': 'Polygon Vector Layers',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='RasterLayer',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
            ],
            options={
                'verbose_name': 'Raster Layer',
                'verbose_name_plural': 'Raster Layers',
            },
            bases=('resources.resource',),
        ),
        migrations.CreateModel(
            name='RemoteWFS',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
                ('service_type', models.CharField(choices=[('', 'Remote service type'), ('remote_wms', 'Remote WMS'), ('remote_wfs', 'Remote WFS'), ('remote_wcs', 'Remote WCS'), ('remote_csw', 'Remote CSW'), ('remote_generic_rest', 'Remote Generic RESTful API'), ('remote_arcgis_rest', 'Remote ArcGIS REST API')], default='wms', max_length=255)),
                ('service_url', models.URLField()),
            ],
            options={
                'verbose_name': 'WFS Service',
                'verbose_name_plural': 'WFS Services',
            },
            bases=('resources.resource', models.Model),
        ),
        migrations.CreateModel(
            name='RemoteWMS',
            fields=[
                ('resource_ptr', models.OneToOneField(auto_created=True, on_delete=django.db.models.deletion.CASCADE, parent_link=True, primary_key=True, serialize=False, to='resources.resource')),
                ('service_type', models.CharField(choices=[('', 'Remote service type'), ('remote_wms', 'Remote WMS'), ('remote_wfs', 'Remote WFS'), ('remote_wcs', 'Remote WCS'), ('remote_csw', 'Remote CSW'), ('remote_generic_rest', 'Remote Generic RESTful API'), ('remote_arcgis_rest', 'Remote ArcGIS REST API')], default='wms', max_length=255)),
                ('service_url', models.URLField()),
            ],
            options={
                'verbose_name': 'WMS Service',
                'verbose_name_plural': 'WMS Services',
            },
            bases=('resources.resource', models.Model),
        ),
    ]
